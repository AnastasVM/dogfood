// кастомный хук, для работы с api, на вход принимает вызов метода апи, обрабатывает эти данные, складывает их в стейт и возвращает
import { useEffect, useState } from "react";

// передаем колбек handle - какой-то метод с класса Api
const useApi = (handle) => {
    // стейт для данных полученных от сервера
    const [data, setData] = useState();
    // стейт для загрузки (булевый)
    const [isLoading, setIsLoading] = useState(false);
    // стейт ошибки (текстовая, поэтому без is),  есди она будет
    const [error, setError] = useState();

    useEffect(() => {
        setIsLoading(true);
        handle()
            .then((result) => {
                // кладем в состояние полученного продукта/можно одного по id
                setData(result);
            })
            .catch((err) => {
                setError(err)
            })
            // завершили загрузку
            .finally(() => {
                setIsLoading(false);
            })
    // сама среда обработки подсказывает, что в массив зависимостей нужно положить handle (входящий параметр, потому, что внутри юзэффекта он используется), но! тогда получится бесконечный цикл, т.к в нашей функции лежит вызов метода апи, который получает данные и кладет их в стейт, ф-ция отработала, юзэффект перезапустился и ф-ция вызвалась вновь. Можно оставить пустой массив зависимостей, но будет баг с некорректным отображеним данных. Починить можно использую useCallback (в продуктпейдж). Используемую функцию в useEffect всегда оборачиваем в колбек!
    }, [handle]);
// должны вернуть не только стейт с карточками (сам продукт), но и фун-ю кот. меняет это состояние, т.к. она нужна далее напиример для лайков
    return { data, setData, isLoading, error }

}

export default useApi;